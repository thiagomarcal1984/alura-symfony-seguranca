security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            # Qualquer recurso que case com o padrão acima não terá seu acesso restrito.
            security: false # Liberação do acesso.
        main:
            lazy: true # Evita que a sessão seja criada enquanto ela não for necessária.
            # O firewall main usa o provider app_user_provider.
            provider: app_user_provider

            # Se o usuário não estiver autenticado neste firewall, é redirecionado pra login.
            form_login: 
                login_path: app_login # Rota do redirecionamento caso não autenticado.
                check_path: app_login # Rota de processamento da requisição POST do login.
                default_target_path: app_series # Rota padrão após realizar o login.
            logout:
                path: app_logout # Rota que vai realizar o logout.
                target: app_login # Rota padrão após realizar o logout.

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/(?!login|register), roles: ROLE_USER } 
        # Qualquer path diferente de login e register só é autorizado depois de logado.

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
